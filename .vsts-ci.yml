name: Intelligence Toolkit
pool:
  vmImage: ubuntu-latest

trigger:
  batch: true
  branches:
    include:
      - main
      
schedules:
- cron: "0 0 * * 0"  # Runs every Sunday at midnight (UTC)
  branches:
    include:
      - main

variables:
  POETRY_VERSION: 1.8.3

stages:
  - stage: Compliance
    dependsOn: []
    jobs:
      - job: compliance
        displayName: Compliance
        pool:
          vmImage: windows-latest
        steps:
          - task: CredScan@3
            inputs:
              outputFormat: sarif
              debugMode: false

          - task: ComponentGovernanceComponentDetection@0
            inputs:
              scanType: "Register"
              verbosity: "Verbose"
              alertWarningLevel: "High"

          - task: PublishSecurityAnalysisLogs@3
            inputs:
              ArtifactName: "CodeAnalysisLogs"
              ArtifactType: "Container"

  - stage: ValidateAndBuild
    dependsOn: []
    condition: 
    jobs:
      - job: validate
        displayName: Install and tests
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.11"
            displayName: "Use Python 3.11"
          - task: Bash@3
            displayName: Install poetry
            inputs:
              workingDirectory: ./
              targetType: "inline"
              script: |
                curl -sSL https://install.python-poetry.org | python -
                export PATH=$PATH:$HOME/.poetry/bin
          - task: Bash@3
            displayName: Install packages
            inputs:
              workingDirectory: ./
              targetType: "inline"
              script: poetry install
          - task: Bash@3
            displayName: Run Tests
            inputs:
              workingDirectory: ./
              targetType: "inline"
              script: poetry run poe test
      - job: buildAndPush
        displayName: BuildAndPushContainer
        dependsOn: validate
        condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['SHOULD_DEPLOY'], 'true')))
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'intelligenceappscontainerservice'
              repository: 'intelligence-toolkit'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: '$(TAG)'

  - stage: Build_NSIS
    dependsOn: []
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['BUILD_EXE'], 'true'))
    jobs:
      - job: NSIS_Build
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.11"
            displayName: "Use Python 3.11"
          - task: PowerShell@2
            displayName: Install Dependencies
            inputs:
              targetType: "inline"
              script: |
                pip install -r requirements.txt
          - task: PowerShell@2
            displayName: 'Install NSIS'
            inputs:
              targetType: 'inline'
              script: |
                # Install NSIS using Scoop
                iwr -useb get.scoop.sh -outfile 'install.ps1'
                .\install.ps1 -RunAsAdmin
                scoop update
                scoop bucket add extras
                scoop install nsis
          - task: PowerShell@2
            displayName: 'Create exe'
            inputs:
              targetType: 'inline'
              script: '.\installer_script.ps1'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/build/nsis/Intelligence_toolkit_installer.exe' 
              artifact: 'executable'
