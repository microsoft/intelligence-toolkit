import session_variable as sv
import pandas as pd
import streamlit as st
from collections import defaultdict

class SessionVariables:
    def __init__(self):
        self.temperature = sv.SessionVariable(0.0)
        self.model = sv.SessionVariable('gpt-4-1106-preview')
        self.max_tokens = sv.SessionVariable(4096)

        self.network_max_rows_to_process = sv.SessionVariable(0)
        self.network_uploaded_files = sv.SessionVariable([])
        self.network_selected_file_name = sv.SessionVariable('')
        self.network_entity_links = sv.SessionVariable([])
        self.network_directed_entity_links = sv.SessionVariable([])
        self.network_attribute_links = sv.SessionVariable([])
        self.network_flag_links = sv.SessionVariable([])
        self.network_components = sv.SessionVariable([])
        self.network_component_to_nodes = sv.SessionVariable(set())
        self.network_component_to_communities = sv.SessionVariable({})
        self.network_community_nodes = sv.SessionVariable([])
        self.network_overall_graph = sv.SessionVariable(None)
        self.network_entity_graph = sv.SessionVariable(None)
        self.network_merged_graph = sv.SessionVariable(None)
        self.network_max_network_size = sv.SessionVariable(50)
        self.network_max_attribute_degree = sv.SessionVariable(10)
        self.network_trimmed_attributes = sv.SessionVariable([])
        self.network_similarity_threshold = sv.SessionVariable(0.05)
        self.network_inferred_links = sv.SessionVariable(defaultdict(set))
        self.network_embedded_texts = sv.SessionVariable([])
        self.network_nearest_text_indices = sv.SessionVariable([])
        self.network_nearest_text_distances = sv.SessionVariable([])
        self.network_node_types = sv.SessionVariable(set())
        self.network_indexed_node_types = sv.SessionVariable([])
        self.network_flag_types = sv.SessionVariable(set())
        # self.network_integrated_flags = sv.SessionVariable(pl.DataFrame())
        # self.network_community_df = sv.SessionVariable(pl.DataFrame())
        self.network_table_index = sv.SessionVariable(0)
        self.network_supporting_attribute_types = sv.SessionVariable([])
        self.network_flagged_nodes = sv.SessionVariable([])
        self.network_entity_to_community_ix = sv.SessionVariable({})
        self.network_entity_df = sv.SessionVariable(pd.DataFrame())

        self.attribute_max_rows_to_process = sv.SessionVariable(0)
        self.attribute_uploaded_files = sv.SessionVariable([])
        self.attribute_selected_file_name = sv.SessionVariable('')
        self.attribute_dynamic_df = sv.SessionVariable(pd.DataFrame())
        self.attribute_type_val_sep_in = sv.SessionVariable('')
        self.attribute_type_val_sep_out = sv.SessionVariable('=')
        self.attribute_laplacian = sv.SessionVariable(True)
        self.attribute_diaga = sv.SessionVariable(True)
        self.attribute_correlation = sv.SessionVariable(True)
        self.attribute_missing_edge_prop = sv.SessionVariable(0.1)
        # self.attribute_umap_df = sv.SessionVariable(pl.DataFrame())
        self.attribute_retain_target = sv.SessionVariable(0.33)
        self.attribute_min_edge_weight = sv.SessionVariable(0.001)
        self.attribute_min_primary_pattern_count = sv.SessionVariable(10)
        self.attribute_min_secondary_pattern_count = sv.SessionVariable(100)
        self.attribute_max_secondary_pattern_length = sv.SessionVariable(5)
        self.attribute_primary_embedding_df = sv.SessionVariable(pd.DataFrame())
        self.attribute_secondary_embedding_df = sv.SessionVariable(pd.DataFrame())
        self.attribute_umap_df = sv.SessionVariable(pd.DataFrame())
        self.attribute_node_to_centroid = sv.SessionVariable({})
        self.attribute_period_embeddings = sv.SessionVariable([])
        self.attribute_embedding_df = sv.SessionVariable(pd.DataFrame())
        # self.attribute_df = sv.SessionVariable(pl.DataFrame())
        self.attribute_sensitivity = sv.SessionVariable(2.0)
        self.attribute_primary_pattern_df = sv.SessionVariable(pd.DataFrame())
        self.attribute_record_counter = sv.SessionVariable(None)
        self.attribute_close_pairs = sv.SessionVariable(0)
        self.attribute_all_pairs = sv.SessionVariable(0)
        self.attribute_secondary_pattern_df = sv.SessionVariable(pd.DataFrame())
        self.attribute_overall_pattern_df = sv.SessionVariable(pd.DataFrame())
        self.attribute_primary_threshold = sv.SessionVariable(0.2)

        self.action_max_entities_to_process = sv.SessionVariable(0)
        self.action_uploaded_files = sv.SessionVariable([])
        self.action_selected_file_name = sv.SessionVariable('')
        # self.action_dynamic_df = sv.SessionVariable(pl.DataFrame())
        self.action_laplacian = sv.SessionVariable(True)
        self.action_diaga = sv.SessionVariable(True)
        self.action_correlation = sv.SessionVariable(True)
        self.action_retain_target = sv.SessionVariable(0.33)
        self.action_missing_edge_prop = sv.SessionVariable(0.1)
        self.action_min_edge_weight = sv.SessionVariable(0.001)
        self.action_type_val_sep = sv.SessionVariable('')
        # self.action_overall_embedding_df = sv.SessionVariable(pl.DataFrame())
        self.action_overall_period_embeddings = sv.SessionVariable([])
        # self.action_umap_df = sv.SessionVariable(pl.DataFrame())
        self.action_node_to_label = sv.SessionVariable({})
        self.action_max_connecting_combination_length = sv.SessionVariable(3)
        self.action_modularity = sv.SessionVariable(0.0)
        self.action_similar_link_threshold = sv.SessionVariable(0.5)
        self.action_sync_link_threshold = sv.SessionVariable(0.8)
        # self.action_links_df = sv.SessionVariable(pl.DataFrame())
        # self.action_neighbours = sv.SessionVariable(5)
        self.action_pattern_explanations = sv.SessionVariable({})

        self.matching_uploaded_files = sv.SessionVariable([])
        self.matching_dfs = sv.SessionVariable({})
        # self.matching_merged_df = sv.SessionVariable(pl.DataFrame())
        # self.matching_matches_df = sv.SessionVariable(pl.DataFrame())
        self.matching_max_rows_to_process = sv.SessionVariable(0)
        self.matching_mapped_atts = sv.SessionVariable([])
        self.matching_sentence_pair_scores = sv.SessionVariable([])
        self.matching_sentence_pair_jaccard_threshold = sv.SessionVariable(0.75)
        self.matching_sentence_pair_embedding_threshold = sv.SessionVariable(0.05)
        # self.matching_evaluations = sv.SessionVariable(pl.DataFrame())

        self.answering_raw_embedding_df = sv.SessionVariable(pd.DataFrame())
        self.answering_q_embedding_df = sv.SessionVariable(pd.DataFrame())
        self.answering_chunk_size = sv.SessionVariable(2000)
        self.answering_next_file_id = sv.SessionVariable(1)
        self.answering_next_chunk_id = sv.SessionVariable(1)
        self.answering_next_q_id = sv.SessionVariable(1)
        self.answering_files = sv.SessionVariable({})
        self.answering_surface_questions = sv.SessionVariable({})
        self.answering_deeper_questions = sv.SessionVariable({})
        self.answering_cluster_target = sv.SessionVariable(10)
        self.answering_question_answers_df = sv.SessionVariable(pd.DataFrame())
        self.answering_question_network_df = sv.SessionVariable(pd.DataFrame())
        self.answering_report_text = sv.SessionVariable('')
        self.answering_last_selections = sv.SessionVariable(pd.DataFrame())
        self.answering_last_question = sv.SessionVariable('')
        self.answering_outline_limit = sv.SessionVariable(4000)
        self.answering_answer_text = sv.SessionVariable('')
        self.answering_last_lazy_question = sv.SessionVariable('')
        self.answering_batch_size = sv.SessionVariable(1)
        self.answering_lazy_outline = sv.SessionVariable('')
        self.answering_lazy_answer_text = sv.SessionVariable('')
        self.answering_outline = sv.SessionVariable('')
        self.answering_max_tier = sv.SessionVariable(2)
        self.answering_target_matches = sv.SessionVariable(5)
        self.answering_status_history = sv.SessionVariable('')
        self.answering_matches = sv.SessionVariable('')
        self.answering_source_diversity = sv.SessionVariable(3)
        self.answering_question_history = sv.SessionVariable([])

        self.chat_theme = sv.SessionVariable('')
        self.chat_messages = sv.SessionVariable([])

        self.case_extraction_history = sv.SessionVariable('')
        self.case_extraction_output = sv.SessionVariable({})
        self.case_extraction_schema = sv.SessionVariable('')
        self.case_extraction_last_output = sv.SessionVariable({})
        self.case_extraction_source_text = sv.SessionVariable('')

        self.story_graph = sv.SessionVariable({})
        self.story_schema = sv.SessionVariable({})
        self.story_generation_output = sv.SessionVariable({})
        self.story_generation_last_output = sv.SessionVariable({})
        self.story_generation_history = sv.SessionVariable('')
        self.story_scenes = sv.SessionVariable([])
        self.story_prose = sv.SessionVariable('')
        self.story_memory = sv.SessionVariable('')
        self.story_structure_text = sv.SessionVariable('')
        self.minor_scene_count = sv.SessionVariable(3)
        self.moderate_scene_count = sv.SessionVariable(5)
        self.major_scene_count = sv.SessionVariable(7)

        self.synthesis_raw_sensitive_df = sv.SessionVariable(pd.DataFrame())
        self.synthesis_process_columns = sv.SessionVariable([])

        st.session_state['my_session_variables'] = self


